document.addEventListener('DOMContentLoaded', () => {
    const taskListContainer = document.getElementById('taskListContainer');
    const backendUrl = 'https://my-telegram-task-bot-5c4258bd3f9b.herokuapp.com';

    const fetchTasks = async () => {
        try {
            const response = await fetch(`${backendUrl}/api/tasks`);
            if (!response.ok) throw new Error(`–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
            const tasks = await response.json();
            renderTasks(tasks);
        } catch (error) {
            console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
            taskListContainer.innerHTML = '<p class="error">–ü–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å.</p>';
        }
    };

    const renderTasks = (tasks) => {
        if (!Array.isArray(tasks) || tasks.length === 0) {
            taskListContainer.innerHTML = '<p>–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.</p>';
            return;
        }

        taskListContainer.innerHTML = '';

        tasks.forEach(task => {
            const card = document.createElement('div');
            card.className = 'task-card';

            const statusText = task.status === 'open' ? 'üü¢ –í—ñ–ª—å–Ω–µ' : 'üî¥ –í —Ä–æ–±–æ—Ç—ñ';
            const statusClass = task.status === 'open' ? 'status-open' : 'status-claimed';
            
            // --- –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –í–ò–ö–û–ù–ê–í–¶–Ü–í –ó –ß–ê–°–û–ú ---
            let claimedUsersHtml = '';
            if (task.claimedUsers?.length > 0) {
                const userItems = task.claimedUsers.map(info => {
                    const time = new Date(info.claimedAt).toLocaleString('uk-UA');
                    return `<li>@${info.user.username || '–Ω–µ–≤—ñ–¥–æ–º–æ'} (<em>${time}</em>)</li>`;
                }).join('');
                claimedUsersHtml = `<div class="user-list"><strong>–í–∏–∫–æ–Ω–∞–≤—Ü—ñ:</strong><ul>${userItems}</ul></div>`;
            }
            
            // --- –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –û–ß–Ü–ö–£–Æ–ß–ò–• –ó –ö–ù–û–ü–ö–ê–ú–ò ---
            let pendingUsersHtml = '';
            if (task.pendingUsers?.length > 0) {
                const userItems = task.pendingUsers.map(user => `
                    <li class="pending-user">
                        <span>@${user.username || '–Ω–µ–≤—ñ–¥–æ–º–æ'}</span>
                        <div class="actions">
                            <button class="approve-btn" data-task-id="${task.id}" data-user-id="${user.id}">‚úÖ</button>
                            <button class="reject-btn" data-task-id="${task.id}" data-user-id="${user.id}">‚ùå</button>
                        </div>
                    </li>
                `).join('');
                pendingUsersHtml = `<div class="user-list"><strong>–û—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:</strong><ul>${userItems}</ul></div>`;
            }
            
            const peopleCount = task.claimedUsers?.length ?? 0;

            card.innerHTML = `
                <h2>–ó–∞–≤–¥–∞–Ω–Ω—è #${task.id}</h2>
                <p>${task.text.replace(/\n/g, '<br>')}</p>
                <div class="task-info">
                    <span class="task-status ${statusClass}">${statusText}</span>
                    <span class="task-people"><strong>–ü–æ—Ç—Ä—ñ–±–Ω–æ:</strong> ${peopleCount}/${task.peopleNeeded}</span>
                </div>
                ${claimedUsersHtml}
                ${pendingUsersHtml}
            `;
            taskListContainer.appendChild(card);
        });
    };

    // --- –û–ë–†–û–ë–ö–ê –ù–ê–¢–ò–°–ö–ê–ù–ù–Ø –ö–ù–û–ü–û–ö ---
    taskListContainer.addEventListener('click', async (event) => {
        const target = event.target;
        const taskId = target.dataset.taskId;
        const userId = target.dataset.userId;

        if (!taskId || !userId) return;

        let action = '';
        if (target.classList.contains('approve-btn')) {
            action = 'approve';
        } else if (target.classList.contains('reject-btn')) {
            action = 'reject';
        } else {
            return;
        }

        try {
            target.disabled = true; // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞ —á–∞—Å –∑–∞–ø–∏—Ç—É
            const response = await fetch(`${backendUrl}/api/tasks/${taskId}/${action}/${userId}`, {
                method: 'POST',
            });
            if (!response.ok) {
                throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é');
            }
            fetchTasks(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –¥—ñ—ó '${action}':`, error);
            alert(`–ù–µ –≤–¥–∞–ª–æ—Å—è ${action === 'approve' ? '—Å—Ö–≤–∞–ª–∏—Ç–∏' : '–≤—ñ–¥—Ö–∏–ª–∏—Ç–∏'} –∑–∞—è–≤–∫—É.`);
            target.disabled = false;
        }
    });

    fetchTasks();
});